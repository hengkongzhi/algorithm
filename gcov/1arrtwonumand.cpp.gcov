        -:    0:Source:../src/1arrtwonumand.cpp
        -:    0:Graph:1arrtwonumand.gcno
        -:    0:Data:1arrtwonumand.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <vector>
        -:    3:#include <string>
        -:    4:#include <unordered_map>
        -:    5:#include <unistd.h>
        -:    6:using namespace std;
        -:    7:class Solution {
        -:    8:public:
        1:    9:    vector<int> twoSum(vector<int>& nums, int target)
        -:   10:    {
        1:   11:        for (int i = 0; i < nums.size(); i++)
        -:   12:        {
        1:   13:            for (int j = i + 1; j < nums.size(); j++)
        -:   14:            {
        1:   15:                if (nums[i] + nums[j] == target)
        -:   16:                {
        1:   17:                    return {i, j};
        -:   18:                }
        -:   19:            }
        -:   20:        }
    #####:   21:        return {};
        -:   22:    }
        1:   23:    void funcTest1()
        -:   24:    {
        1:   25:        srand(0);
        1:   26:        char sz[3] = {'a', 'b', 'c'};
100000001:   27:        for (int i = 0; i < 100000000; i++)
        -:   28:        {
100000000:   29:            int a = rand() % 3;
100000000:   30:            int b = rand() % 3;
100000000:   31:            int c = rand() % 3;
100000000:   32:            string tmp = "" + sz[a] + sz[b] + sz[c];
        -:   33:        }
        1:   34:    }
        1:   35:    void funcTest2()
        -:   36:    {
        1:   37:        srand(0);
        1:   38:        char sz[4] = {'a', 'b', 'c', 'd'};
100000001:   39:        for (int i = 0; i < 100000000; i++)
        -:   40:        {
100000000:   41:            int a = rand() % 4;
100000000:   42:            int b = rand() % 4;
100000000:   43:            int c = rand() % 4;
100000000:   44:            int d = rand() % 4;
100000000:   45:            string tmp = "" + sz[a] + sz[b] + sz[c] + sz[d];
        -:   46:        }
        1:   47:    }
        1:   48:    vector<int> twoSum1(vector<int>& nums, int target)
        -:   49:    {
        2:   50:        unordered_map<int, int> myMap;
        1:   51:        funcTest1();
        1:   52:        funcTest2();
        2:   53:        for (int i = 0; i < nums.size(); i++)
        -:   54:        {
        2:   55:            auto iter = myMap.find(target - nums[i]);
        2:   56:            if (iter != myMap.end())
        -:   57:            {
        1:   58:                return {iter->second, i};
        -:   59:            }
        -:   60:            else
        -:   61:            {
        1:   62:                myMap.insert(pair<int, int>(nums[i], i));
        -:   63:            }
        -:   64:        }
        -:   65:
    #####:   66:        return {};
        -:   67:    }
        2:   68:    void printVec(const vector<int>& nums1)
        -:   69:    {
        6:   70:        for (int i = 0; i < nums1.size(); i++)
        -:   71:        {
        4:   72:            cout << nums1[i] << " ";
        -:   73:        }
        2:   74:        cout << endl;
        2:   75:    }
        -:   76:};
        3:   77:int main(int argc, char** argv)
        -:   78:{
        6:   79:    vector<int> nums1{2,7,11,15};
        6:   80:    vector<int> nums2{3,3};
        -:   81:    Solution solve;
        3:   82:    if (argc < 2)
        -:   83:    {
        1:   84:        cout << "argc is less 2" << endl;
        1:   85:        cout << "eg: ./1arrtwonumand 1" << endl;
        1:   86:        cout << "or eg: ./1arrtwonumand 2" << endl;
        1:   87:        return 0;
        -:   88:    }
        2:   89:    int index = atoi(argv[1]);
        2:   90:    if (index == 1)
        -:   91:    {
        1:   92:        solve.printVec(solve.twoSum1(nums2, 6));
        -:   93:    }
        -:   94:    else
        -:   95:    {
        1:   96:        solve.printVec(solve.twoSum(nums2, 6));
        -:   97:    }
        2:   98:    return 0;
        9:   99:}
